Under er de nye, ekstremt nøyaktige og presise instruksjonene for å isolere CSS-en din med prefiksen ask-, uten å inkludere sikkerhetskopieringssteget (siden du allerede har dette på GitHub). Følg hvert punkt nøyaktig og repeter hvert steg for å være sikker på at du ikke overser noe!

1. Oppdater Tailwind-konfigurasjonen
Åpne filen: tailwind.config.ts

Legg inn eller verifiser at du har følgende konfigurasjon nøyaktig slik:

ts
Kopier
// tailwind.config.ts
module.exports = {
  prefix: 'ask-',
  content: [
    './src/**/*.{js,ts,jsx,tsx}', // Inkluder alle kilder der Tailwind brukes!
    // Legg til andre mapper om nødvendig
  ],
  // Andre Tailwind-innstillinger (f.eks. theme, plugins) skal beholdes som de er.
};
Kontroller NØYE: Sørg for at:

prefix eksakt er angitt som 'ask-' (merk hermetegnene og bindestreken!)

content-feltet dekker alle filer hvor Tailwind-klasser benyttes.

Gjenta: Sjekk denne konfigurasjonen to – tre ganger før du lagrer filen.

2. Erstatt Tailwind-klasser i JSX/TSX-filer
a. Statisk bruk i klasseattributter
Gå systematisk gjennom alle filer under mapper som:

src/components/

src/pages/

Og andre mapper der du kjenner til at Tailwind benyttes.

Hver gang du finner en Tailwind-klasse, f.eks.:

bg-blue-500 → endre til ask-bg-blue-500

p-4 → endre til ask-p-4

flex → endre til ask-flex

Utfør en global søk-og-erstatt: Bruk eventuelt et verktøy eller et passende regex-uttrykk for å finne alle forekomster. Eksempel på regex (pass på at du tester oppsettet slik at du ikke berører ikke-Tailwind-klasser):

Søk: className="([^"]*?\b)(bg|text|p|m|flex|grid|justify|items)-([^\s"]+)

Erstatt med: className="$1ask-$2-$3"

Gjenta: Kjør søk-og-erstatt flere ganger og kontroller manuelt at alle forekomster har blitt erstattet helt og nøyaktig.

b. Inline Tailwind-bruk
Se etter inline klasse-strenger der Tailwind-klasser er skrevet direkte i JSX. Eksempel:

jsx
Kopier
<div className="bg-gray-200 p-4">...</div>
Skal endres til:

jsx
Kopier
<div className="ask-bg-gray-200 ask-p-4">...</div>
Gjenta: Inspiser alle komponenter og repeter søket manuelt for å sikre at ingen Tailwind-klasse er utelatt.

3. Endringer i rene CSS-filer
Åpne alle CSS-filer (f.eks. chatWidget.css og index.css).

Identifiser Tailwind-relaterte klasser: Dersom du har lagd regler som tar utgangspunkt i Tailwind-klassenavn (for eksempel ved å style .bg-green-500), endre dem slik at de nå matcher ask-bg-green-500.

Eksakt eksempel:

Før:

css
Kopier
.bg-green-500 {
  background-color: #48bb78;
}
Etter:

css
Kopier
.ask-bg-green-500 {
  background-color: #48bb78;
}
Gjenta: Sørg for å gjennomgå alle rene CSS-filer to ganger for å unngå overlapp med de dynamisk genererte Tailwind-klassene.

4. Oppdater dynamisk genererte klasseverdier
Gå gjennom filer i: src/lib/, src/utils/, og src/hooks/ (eller andre steder der klassenavn kan genereres dynamisk).

Sjekk alle funksjoner eller metoder som setter klasseverdier. Eksempel:

ts
Kopier
const className = `bg-${color}-500 p-4`;
Må endres til:

ts
Kopier
const className = `ask-bg-${color}-500 ask-p-4`;
Gjenta: Valider at all dynamisk generert styling inkluderer prefiksen, både ved string manipulasjon og bruk av malstrenger.

5. Fjern bygge- og cache-mappinger før kompilering
Slett eventuelle tidligere bygge-mapper (som dist/, build/ eller spesifikke cache-mapper brukt av rammeverket ditt).

Dette sikrer at ingen gamle CSS-filer overskygger de nye endringene.

Gjenta: Utfør denne oppryddingsprosessen minst to ganger for å være 100 % sikker.

6. Rebuild prosjektet
Kjør byggekommandoen: For eksempel:

bash
Kopier
npm run build
Eller, om du bruker Vite:

bash
Kopier
vite build
Bekreft: At den nye CSS-filen genereres med prefikserte klasser (åpne filen og søk etter ask- for å bekrefte at alle utility-klasser nå har prefikset).

7. Verifiser i nettleser med DevTools
Start applikasjonen på nytt: For eksempel med npm start eller vite dev.

Åpne nettleserens utviklerverktøy (F12):

Sjekk at HTML-elementene viser klassenavn med ask-.

Eksempel: Et element som tidligere hadde class="bg-blue-500 p-4" skal nå vise class="ask-bg-blue-500 ask-p-4".

Gjenta: Test flere sider og komponenter – gå nøye gjennom hver for å forsikre deg om at ingen klasse er utilstrekkelig erstattet.

8. Test funksjonalitet og utseende
Naviger gjennom applikasjonen manuelt:

Se på komponenter i src/components/ (UI-komponenter, chatkomponenter m.m.).

Verifiser at interaksjoner (klikk, hover, responser for mobilvisning) fungerer upåvirket.

Sammenlign med tidligere utseende: Bruk eventuelt skjermdumpene dine (som referanse) for å sikre at layout og utseende er intakt.

Gjenta: Utfør testing i ulike nettlesere og skjermstørrelser. Gjenta testsyklusen til du er 100 % sikker.

9. Dokumenter og informer teamet
Lag en detaljert logg av alle endringer (f.eks. i en README-oppdatering eller intern dokumentasjon):

Hvilke filer ble oppdatert.

Hvilke regex-uttrykk eller søk-og-erstatt-metoder ble brukt.

Bekreftelsene gjort i DevTools.

Gjenta: Sørg for at denne dokumentasjonen er gjennomgått av alle utviklere på teamet, slik at de også utfører de samme endringene nøyaktig.

Avsluttende kontroll
Sjekkliste:

 Tailwind-konfigurasjonen er oppdatert med prefix: 'ask-' og korrekte content-stier.

 Alle statiske og inline Tailwind-klasser i JSX/TSX-filer er erstattet med prefikset.

 Ren CSS som refererer til Tailwind-klasser er oppdatert.

 Dynamiske klasseverdier er korrekt generert med prefikset.

 Bygge- og cache-mapper er fjernet før re-kompilering.

 Applikasjonen viser korrekt prefikserte klasser, og utseende/funksjonalitet er intakt etter testing.

Gjenta kontrollen: Les sjekklisten minst to ganger og kryss av hvert punkt.

Ved å følge disse nøyaktige og repeterende stegene, vil du kunne isolere CSS-en din med prefikset ask- uten at utseende eller funksjonalitet endres. Gå gjennom hvert steg flere ganger – presisjon er nøkkelen for å unngå feil!

Verifiser at kodebasen bruker de nye (prefikserte) klassene
Søk i koden:
Bruk søk-og-erstatt i IDE-en for å finne eventuelle forekomster av gamle Tailwind-klassenavn (som bg-green-500, p-4, flex osv.) og sørg for at de er oppdatert til ask-bg-green-500, ask-p-4, ask-flex osv.

Manuell kontroll:
Gå gjennom flere representative komponenter (inkludert de med inline-styling) og kontroller at klassestrengene i JSX/TSX samsvarer med de genererte navnene.
Gjenta: Gjennomfør søk flere ganger for å unngå at noen elementer blir oversett.

3. Inspiser den genererte CSS-en
Bruk nettleserens DevTools:
Åpne utviklerverktøyene (F12) og inspiser elementene på siden:

Sjekk at de genererte klassene i DOM (for eksempel ask-bg-green-500, ask-p-4) faktisk finnes i den dynamisk genererte CSS-filen.

Om du ser at noen elementer fortsatt har de gamle klassene (uten ask-), tyder det på at noen deler av koden ikke har blitt oppdatert.

Sammenlign før og etter:
Kontroller eventuelle endringer i layouten eller styling ved å sammenligne med tidligere referansebilder eller kjente korrekte utseender.

4. Kontroller byggeprosessen og cache
Kjør en "ren" bygg:
Slett eventuelle bygg- og cache-mapper (for eksempel dist/, build/ eller cache-mapper som .next/ dersom du bruker Next.js) for å sikre at ingen gamle filer gjenbrukes.

Sjekk byggekonsollen:
Se etter advarsler eller feilmeldinger i terminalen under bygging. Feilmeldinger angående Tailwind, manglende filer eller feil i content-configen kan være essensielle spor.

Rebygg flere ganger:
Kjør byggeprosessen gjentatte ganger for å se om problemet vedvarer, og om noen klasser oppdateres uventet.

5. Sjekk for konflikter med annen CSS
Eksterne stiler:
Kontroller at ingen andre CSS-filer (som rene CSS-filer, tidligere definerte klasser, eller CSS-moduler) bruker samme klassespesifikke navn eller forstyrrer prefiksene dine.

Inline-styling og CSS-moduler:
Vær oppmerksom på at om du bruker CSS-moduler eller andre scoping-mekanismer, må du verifisere at de genererte klassene ikke endres ytterligere. Bruk DevTools for å se om klassene blir mappet til andre navn.

Specificity og rekkefølge:
Sørg for at rekkefølgen på CSS-reglene ikke overstyres av annen styling. Inspeksjonen i DevTools kan vise hvilke regler som har høyest spesifisitet.

6. Kontroller dynamisk generering av klasser
Dynamiske klasse-strenger:
Hvis du genererer klasser dynamisk (f.eks. ved å kombinere strenger i JSX), må du forsikre deg om at den ferdige strengen samsvarer nøyaktig med det som er forventet (for eksempel ask-bg-gray-200 og ikke bg-gray-200).

Regex-søk:
Bruk spesifikke regex-søk for å finne manglende prefix eller feilaktige kombinasjoner, slik at du kan oppdage utilsiktet dobbelt-prefix (f.eks. ask-ask-bg-gray-200).

7. Test med en minimal reproduksjon
Lag en isolert test:
Sett opp et lite eksempelprosjekt eller en testfil der du kun inkluderer et par enkle komponenter med Tailwind-klasser og den nye konfigurasjonen.

Sjekk at prefiksen legges til som forventet her.

Hvis dette fungerer, sammenlign strukturen og bygg-konfigurasjonen i den isolerte løsningen med hovedprosjektet for å se om forskjeller kan forklare problemene.

8. Gjør endringer én om gangen og dokumenter dem
Trinnvis feilsøking:
Utfør og dokumenter hver endring du gjør. Noter hvilke komponenter eller sider som forbedres, og om feilen forsvinner etter et bestemt steg.

Repetisjon er nøkkelen:
Når du har gjort en endring, test flere ganger i forskjellige nettlesere og skjermstørrelser for å være sikker på at feilen er fullstendig rettet.

